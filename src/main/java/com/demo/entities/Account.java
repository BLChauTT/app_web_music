package com.demo.entities;
// Generated Apr 23, 2024, 11:24:45â€¯AM by Hibernate Tools 4.3.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.UniqueConstraint;


/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account", catalog = "music_app", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "username") })
public class Account implements java.io.Serializable {

	private int accountId;
	private Role role;
	private String username;
	private String email;
	private String password;
	private boolean status;
	private String token;
	private String securityCode;
	private Set<Favorite> favorites = new HashSet<Favorite>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Notification> notifications = new HashSet<Notification>(0);
	private Set<AccountSong> accountSongs = new HashSet<AccountSong>(0);
	private Set<Rating> ratings = new HashSet<Rating>(0);
	private Set<Userprofile> userprofiles = new HashSet<Userprofile>(0);
	private Set<Accountmembership> accountmemberships = new HashSet<Accountmembership>(0);
	private Set<Song> songs = new HashSet<Song>(0);
	private Set<Transactionhistory> transactionhistories = new HashSet<Transactionhistory>(0);

	public Account() {
	}

	public Account(int accountId, String username, String email, String password, boolean status) {
		this.accountId = accountId;
		this.username = username;
		this.email = email;
		this.password = password;
		this.status = status;
	}

	public Account(int accountId, Role role, String username, String email, String password, boolean status,
			String token, String securityCode, Set<Favorite> favorites, Set<Comment> comments,
			Set<Notification> notifications, Set<AccountSong> accountSongs, Set<Rating> ratings,
			Set<Userprofile> userprofiles,
			Set<Accountmembership> accountmemberships, Set<Song> songs, Set<Transactionhistory> transactionhistories) {
		this.accountId = accountId;
		this.role = role;
		this.username = username;
		this.email = email;
		this.password = password;
		this.status = status;
		this.token = token;
		this.securityCode = securityCode;
		this.favorites = favorites;
		this.comments = comments;
		this.notifications = notifications;
		this.accountSongs = accountSongs;
		this.ratings = ratings;
		this.userprofiles = userprofiles;
		this.accountmemberships = accountmemberships;
		this.songs = songs;
		this.transactionhistories = transactionhistories;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)

	@Column(name = "account_id", unique = true, nullable = false)
	public int getAccountId() {
		return this.accountId;
	}

	public void setAccountId(int accountId) {
		this.accountId = accountId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id")
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "username", unique = true, nullable = false, length = 50)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "email", unique = true, nullable = false, length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "status", nullable = false)
	public boolean isStatus() {
		return this.status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	@Column(name = "token")
	public String getToken() {
		return this.token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	@Column(name = "security_code")
	public String getSecurityCode() {
		return this.securityCode;
	}

	public void setSecurityCode(String securityCode) {
		this.securityCode = securityCode;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Favorite> getFavorites() {
		return this.favorites;
	}

	public void setFavorites(Set<Favorite> favorites) {
		this.favorites = favorites;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Notification> getNotifications() {
		return this.notifications;
	}

	public void setNotifications(Set<Notification> notifications) {
		this.notifications = notifications;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<AccountSong> getAccountSongs() {
		return this.accountSongs;
	}

	public void setAccountSongs(Set<AccountSong> accountSongs) {
		this.accountSongs = accountSongs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Rating> getRatings() {
		return this.ratings;
	}

	public void setRatings(Set<Rating> ratings) {
		this.ratings = ratings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Userprofile> getUserprofiles() {
		return this.userprofiles;
	}

	public void setUserprofiles(Set<Userprofile> userprofiles) {
		this.userprofiles = userprofiles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Accountmembership> getAccountmemberships() {
		return this.accountmemberships;
	}

	public void setAccountmemberships(Set<Accountmembership> accountmemberships) {
		this.accountmemberships = accountmemberships;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Song> getSongs() {
		return this.songs;
	}

	public void setSongs(Set<Song> songs) {
		this.songs = songs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Transactionhistory> getTransactionhistories() {
		return this.transactionhistories;
	}

	public void setTransactionhistories(Set<Transactionhistory> transactionhistories) {
		this.transactionhistories = transactionhistories;
	}

}
